
import "common.did";

type FruitState = variant {
    open;
    claimed;
    completed;
    closed; 
};

type Fruit = record {
    id: FruitID;
    title: text;
    description: text;

    creator: principal;
    created_at: Timestamp;
    state: FruitState;

    rewards: nat;

    // Returnable deposit.
    deposit: nat;

    claimed_by: opt principal;


    // mission: 
};

service : {
    // Fruit related functions.
    // The update and close functions are only for the creator of the fruit.
    "get_fruits": () -> (vec FruitID) query;
    "get_fruit": (id: FruitID) -> (Fruit) query;
    "claim_fruit": (id: FruitID) -> (bool);
    "offer_fruit": (fruit: Fruit) -> (FruitID);
    "update_fruit": (id: FruitID, fruit: Fruit) -> (bool);
    "_fruit": (id: FruitID) -> (bool);
}
